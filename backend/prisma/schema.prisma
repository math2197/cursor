generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum ProcessStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  processes Process[]
  tasks     Task[]
  documents Document[] @relation("UserDocuments")
  photoUrl  String?
}

model Client {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String
  document  String    @unique
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  processes Process[]
}

model Process {
  id          String        @id @default(uuid())
  number      String        @unique
  title       String
  description String?
  status      ProcessStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  client      Client        @relation(fields: [clientId], references: [id])
  clientId    String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  tasks       Task[]
  tags        Tag[]
  documents   Document[]
  requerente  String?       // Parte autora
  requerido   String?       // Parte r√©
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  process     Process    @relation(fields: [processId], references: [id])
  processId   String
  assignedTo  User       @relation(fields: [assignedToId], references: [id])
  assignedToId String
  tags        Tag[]
}

model Tag {
  id        String    @id @default(uuid())
  name      String
  color     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  processes Process[]
  tasks     Task[]
}

model Document {
  id           String   @id @default(uuid())
  name         String
  url          String
  process      Process  @relation(fields: [processId], references: [id])
  processId    String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id], name: "UserDocuments")
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
} 