generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      String    @default("USER")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tasks     Task[]
}

model Client {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String?
  address   String?
  document  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  processes Process[]
}

model Process {
  id          String    @id @default(uuid())
  number      String    @unique
  title       String
  description String?
  status      String    @default("PENDING")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  client      Client    @relation(fields: [clientId], references: [id])
  clientId    String
  tasks       Task[]
  tags        Tag[]
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      String    @default("PENDING")
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  process     Process   @relation(fields: [processId], references: [id])
  processId   String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  color     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(USER)
  profileImage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  processes     Process[]
  tasks         Task[]
}

model Client {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  phone         String?
  document      String    @unique
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  processes     Process[]
}

model Process {
  id            String    @id @default(uuid())
  number        String    @unique
  title         String
  description   String?
  status        ProcessStatus @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  clients       Client[]
  tasks         Task[]
  tags          Tag[]
  user          User      @relation(fields: [userId], references: [id])
  userId        String
}

model Task {
  id            String    @id @default(uuid())
  title         String
  description   String?
  status        TaskStatus @default(PENDING)
  dueDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  process       Process   @relation(fields: [processId], references: [id])
  processId     String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
}

model Tag {
  id            String    @id @default(uuid())
  name          String    @unique
  color         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  processes     Process[]
}

enum Role {
  ADMIN
  USER
}

enum ProcessStatus {
  ACTIVE
  ARCHIVED
  CLOSED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
} 